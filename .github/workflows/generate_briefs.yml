name: Generate Guild Op Briefs for Review

on:
  push:
    paths:
      # Updated to the new, simplified path
      - 'Projects/input_ops.json'

permissions:
  contents: write

jobs:
  generate_for_review:
    if: "contains(github.event.head_commit.message, '[skip ci]') == false"
    runs-on: ubuntu-latest
    
    env:
      # Updated to the new, simplified path
      OPS_FILE_PATH: "Projects/input_ops.json"
      GEMINI_MODEL: "gemini-2.5-flash-preview-05-20"
      PROMPT_TEMPLATE_PATH: ".github/scripts/prompts/review_generation_prompt_template.txt" 
      PROJECT_MAPPINGS_FILE: "project_mappings.json"
      BASE_OUTPUT_JSON: "_generated_briefs_to_create.json"
      BASE_OUTPUT_MD: "_generated_briefs_for_review.md"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install jq (JSON Processor)
        run: sudo apt-get install -y jq

      - name: Read Metadata from JSON and Set Environment
        id: metadata
        run: |
          echo "Reading metadata from ${{ env.OPS_FILE_PATH }}"
          PROJECT_ID_PREFIX=$(jq -r '.project_metadata.project_id_prefix' ${{ env.OPS_FILE_PATH }})
          echo "PROJECT_ID_FROM_FILE=${PROJECT_ID_PREFIX}" >> $GITHUB_ENV
          echo "CONTEXT_LABEL_FROM_FILE=$(jq -r '.project_metadata.context_label' ${{ env.OPS_FILE_PATH }})" >> $GITHUB_ENV
          echo "ASSIGNEE_FROM_FILE=$(jq -r '.project_metadata.default_assignee' ${{ env.OPS_FILE_PATH }})" >> $GITHUB_ENV
          
          TARGET_DIR_PATH=$(jq -r --arg projid "$PROJECT_ID_PREFIX" '.[$projid].dir_path' ${{ env.PROJECT_MAPPINGS_FILE }})
          echo "TARGET_DIR_PATH=${TARGET_DIR_PATH}" >> $GITHUB_ENV

      # ... The rest of the workflow (timestamp, python install, script run, commit) remains the same ...
      # The 'Commit Generated Briefs' step will work perfectly as it uses the TARGET_DIR_PATH variable we set above.
      - name: Generate Timestamp
        id: timestamp
        run: |
          echo "TIMESTAMP=$(date +'%Y-%m-%d_%H%M')" >> $GITHUB_ENV

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai 

      - name: Run Brief Generation for Review Script
        # ... this step does not need changes ...
        id: generate-script
        run: |
          TIMESTAMPED_JSON="${{ steps.timestamp.outputs.TIMESTAMP }}${{ env.BASE_OUTPUT_JSON }}"
          TIMESTAMPED_MD="${{ steps.timestamp.outputs.TIMESTAMP }}${{ env.BASE_OUTPUT_MD }}"
          echo "--- Script Inputs ---"
          echo "Project ID Prefix: ${{ env.PROJECT_ID_FROM_FILE }}"
          echo "Target Directory:  ${{ env.TARGET_DIR_PATH }}"
          echo "Output JSON file:  $TIMESTAMPED_JSON"
          echo "Output MD file:    $TIMESTAMPED_MD"
          echo "---------------------"
          python .github/scripts/generate_briefs_for_review.py \
            --ops_file "${{ env.OPS_FILE_PATH }}" \
            --project_id_cli_arg "${{ env.PROJECT_ID_FROM_FILE }}" \
            --context_label "${{ env.CONTEXT_LABEL_FROM_FILE }}" \
            --assignee "${{ env.ASSIGNEE_FROM_FILE }}" \
            --prompt_template_path "${{ env.PROMPT_TEMPLATE_PATH }}" \
            --project_mappings_file "${{ env.PROJECT_MAPPINGS_FILE }}" \
            --model_name "${{ env.GEMINI_MODEL }}" \
            --output_json_file "$TIMESTAMPED_JSON" \
            --output_md_file "$TIMESTAMPED_MD"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Commit Generated Briefs
        # ... this step also does not need changes ...
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(autogen): Add generated briefs for ${{ env.PROJECT_ID_FROM_FILE }} [skip ci]"
          commit_user_name: "Chiron Guild Scribe [bot]"
          commit_user_email: "actions@github.com"
          prepare_for_commit: |
            DESTINATION_DIR="${{ env.TARGET_DIR_PATH }}/Generated Briefs"
            echo "Creating destination directory: $DESTINATION_DIR"
            mkdir -p "$DESTINATION_DIR"
            echo "Moving generated files..."
            TIMESTAMPED_JSON="${{ steps.timestamp.outputs.TIMESTAMP }}${{ env.BASE_OUTPUT_JSON }}"
            TIMESTAMPED_MD="${{ steps.timestamp.outputs.TIMESTAMP }}${{ env.BASE_OUTPUT_MD }}"
            mv "$TIMESTAMPED_JSON" "$DESTINATION_DIR/"
            mv "$TIMESTAMPED_MD" "$DESTINATION_DIR/"
          file_pattern: "${{ env.TARGET_DIR_PATH }}/Generated Briefs/*"