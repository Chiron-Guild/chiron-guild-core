name: Generate Guild Op Briefs for Review

on:
  push:
    paths:
      - 'Projects/input_ops.json'

permissions:
  contents: write

jobs:
  generate_for_review:
    if: "contains(github.event.head_commit.message, '[skip ci]') == false"
    runs-on: ubuntu-latest
    
    env:
      OPS_FILE_PATH: "Projects/input_ops.json"
      GEMINI_MODEL: "gemini-2.5-flash-preview-05-20"
      PROMPT_TEMPLATE_PATH: ".github/scripts/prompts/review_generation_prompt_template.txt" 
      PROJECT_MAPPINGS_FILE: "project_mappings.json"
      BASE_OUTPUT_JSON: "_generated_briefs_to_create.json"
      BASE_OUTPUT_MD: "_generated_briefs_for_review.md"
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install jq (JSON Processor)
        run: sudo apt-get install -y jq

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai

      # --- THIS IS THE NEW, CONSOLIDATED STEP ---
      - name: Generate, Prepare, and Move Briefs
        id: process-briefs
        run: |
          # --- Part 1: Read Metadata (from previous 'metadata' step) ---
          PROJECT_ID_PREFIX=$(jq -r '.project_metadata.project_id_prefix' $OPS_FILE_PATH)
          TARGET_DIR_PATH=$(jq -r --arg projid "$PROJECT_ID_PREFIX" '.[$projid].dir_path' $PROJECT_MAPPINGS_FILE)
          CONTEXT_LABEL=$(jq -r '.project_metadata.context_label' $OPS_FILE_PATH)
          ASSIGNEE=$(jq -r '.project_metadata.default_assignee' $OPS_FILE_PATH)

          # --- Part 2: Generate Timestamp (from previous 'timestamp' step) ---
          TIMESTAMP=$(date +'%Y-%m-%d_%H%M')
          
          # --- Part 3: Run Script (from previous 'generate-script' step) ---
          echo "Running Python script..."
          JSON_FILENAME="${TIMESTAMP}${BASE_OUTPUT_JSON}"
          MD_FILENAME="${TIMESTAMP}${BASE_OUTPUT_MD}"
          
          python .github/scripts/generate_briefs_for_review.py \
            --ops_file "$OPS_FILE_PATH" \
            --project_id_cli_arg "$PROJECT_ID_PREFIX" \
            --context_label "$CONTEXT_LABEL" \
            --assignee "$ASSIGNEE" \
            --prompt_template_path "$PROMPT_TEMPLATE_PATH" \
            --project_mappings_file "$PROJECT_MAPPINGS_FILE" \
            --model_name "$GEMINI_MODEL" \
            --output_json_file "$JSON_FILENAME" \
            --output_md_file "$MD_FILENAME"
          
          # --- Part 4: Prepare and Move (from previous 'prepare-files' step) ---
          echo "--- Verifying created files ---"
          ls -l
          
          DESTINATION_DIR="${TARGET_DIR_PATH}/Generated Briefs"
          echo "Creating destination directory: $DESTINATION_DIR"
          mkdir -p "$DESTINATION_DIR"
          
          echo "Moving generated files: $JSON_FILENAME and $MD_FILENAME"
          mv "$JSON_FILENAME" "$DESTINATION_DIR/"
          mv "$MD_FILENAME" "$DESTINATION_DIR/"
          echo "Files moved successfully."
          
          # Pass the final directory path to the commit step
          echo "commit_path=${DESTINATION_DIR}" >> $GITHUB_OUTPUT

      - name: Commit Generated Briefs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(autogen): Add generated briefs for $(jq -r '.project_metadata.project_id_prefix' $OPS_FILE_PATH) [skip ci]"
          commit_user_name: "Chiron Guild Scribe [bot]"
          commit_user_email: "actions@github.com"
          # The file pattern now uses the output from the consolidated step
          file_pattern: "${{ steps.process-briefs.outputs.commit_path }}/*"
