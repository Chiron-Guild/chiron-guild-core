name: Generate Guild Op Briefs for Review

on:
  push:
    paths:
      - 'PROJECTS & INITIATIVES/input_ops.json'

permissions:
  contents: read 

jobs:
  generate_for_review:
    runs-on: ubuntu-latest
    
    # Environment variables that are static or configuration for the workflow itself
    env:
      OPS_FILE_PATH: "PROJECTS & INITIATIVES/input_ops.json" 
      GEMINI_MODEL: "gemini-2.5-flash-preview-05-20"
      PROMPT_TEMPLATE_PATH: ".github/scripts/prompts/review_generation_prompt_template.txt" 
      OUTPUT_JSON_FILE: "_generated_briefs_to_create.json"
      OUTPUT_MD_FILE: "_generated_briefs_for_review.md"
      PROJECT_MAPPINGS_FILE: "project_mappings.json"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # NEW STEP: Install jq, a command-line JSON processor
      - name: Install jq
        run: sudo apt-get install -y jq

      # NEW STEP: Read metadata from input_ops.json and set as ENV variables
      - name: Read Metadata from JSON
        id: metadata
        run: |
          echo "PROJECT_ID_FROM_FILE=$(jq -r '.project_metadata.project_id_prefix' ${{ env.OPS_FILE_PATH }})" >> $GITHUB_ENV
          echo "CONTEXT_LABEL_FROM_FILE=$(jq -r '.project_metadata.context_label' ${{ env.OPS_FILE_PATH }})" >> $GITHUB_ENV
          echo "ASSIGNEE_FROM_FILE=$(jq -r '.project_metadata.default_assignee' ${{ env.OPS_FILE_PATH }})" >> $GITHUB_ENV
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai 

      - name: Run Brief Generation for Review Script
        id: generate-script
        run: |
          echo "Using Project ID: ${{ env.PROJECT_ID_FROM_FILE }}"
          echo "Using Context Label: ${{ env.CONTEXT_LABEL_FROM_FILE }}"
          echo "Using Assignee: ${{ env.ASSIGNEE_FROM_FILE }}"
          
          python .github/scripts/generate_briefs_for_review.py \
            --ops_file "${{ env.OPS_FILE_PATH }}" \
            --project_id_cli_arg "${{ env.PROJECT_ID_FROM_FILE }}" \
            --context_label "${{ env.CONTEXT_LABEL_FROM_FILE }}" \
            --assignee "${{ env.ASSIGNEE_FROM_FILE }}" \
            --prompt_template_path "${{ env.PROMPT_TEMPLATE_PATH }}" \
            --output_json_file "${{ env.OUTPUT_JSON_FILE }}" \
            --output_md_file "${{ env.OUTPUT_MD_FILE }}" \
            --project_mappings_file "${{ env.PROJECT_MAPPINGS_FILE }}" \
            --model_name "${{ env.GEMINI_MODEL }}"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Upload Generated Briefs for Review (JSON)
        uses: actions/upload-artifact@v4
        with:
          name: generated-briefs-json
          path: ${{ env.OUTPUT_JSON_FILE }}
          if-no-files-found: error

      - name: Upload Generated Briefs for Review (Markdown)
        uses: actions/upload-artifact@v4
        with:
          name: generated-briefs-markdown
          path: ${{ env.OUTPUT_MD_FILE }}
          if-no-files-found: error
