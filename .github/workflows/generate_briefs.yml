name: Create Guild Op Issues

on:
  push:
    paths:
      - 'archives/input_ops.json' # Path to your input JSON

permissions:
  contents: read
  issues: write

jobs:
  create_issues_from_json:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: "CCG"
      CONTEXT_LABEL: "Context:PERS"
      ASSIGNEE: "Kin-Caid"
      REPO_NAME: ${{ github.repository }}
      OPS_FILE_PATH: "archives/input_ops.json"
      # --- CORRECTED PATH FOR PROMPT TEMPLATE ---
      PROMPT_TEMPLATE_PATH: "docs/prompts/issue_creation_prompt_template.txt" 
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai PyGithub # PyGithub is needed if script uses it

      - name: Authenticate GitHub CLI (Only if your script uses 'gh CLI', not needed for PyGithub version)
        # If using PyGithub version of process_ops.py, this step can be removed.
        # run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
        # Ensure GITHUB_TOKEN is available if script expects it, but PyGithub uses it directly
        if: ${{ false }} # Temporarily disable if using PyGithub version of script
        run: echo "Skipping gh auth as PyGithub is used"

      - name: Run Guild Op Processing Script
        run: |
          # --- CORRECTED PATH TO SCRIPT ---
          python .github/scripts/process_ops.py \
            --ops_file "${{ env.OPS_FILE_PATH }}" \
            --project_id "${{ env.PROJECT_ID }}" \
            --context_label "${{ env.CONTEXT_LABEL }}" \
            --assignee "${{ env.ASSIGNEE }}" \
            --repo_name "${{ env.REPO_NAME }}" \
            --prompt_template_path "${{ env.PROMPT_TEMPLATE_PATH }}"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # PyGithub script will use this
