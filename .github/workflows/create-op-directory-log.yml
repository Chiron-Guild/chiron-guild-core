name: Create Guild Op Directory, Log File, and Apply Project Label

on:
  issues:
    types:
      - opened

permissions:
  contents: write
  issues: write

jobs:
  create_op_scaffolding:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Parse Guild Op Info and Determine Project Paths
        id: parse_info
        env:
          ISSUE_TITLE: "${{ github.event.issue.title }}"
          ISSUE_BODY: "${{ github.event.issue.body }}"
          MAPPINGS_FILE: "project_mappings.json"
          BASE_PROJECTS_DIR: "PROJECTS & INITIATIVES"
          GUILD_OPS_SUBDIR_NAME: "Guild Ops"
        run: |
          echo "Parsing Guild Op Info from issue..."
          RAW_GUILD_OP_ID=$(echo "$ISSUE_TITLE $ISSUE_BODY" | grep -oE "\[[A-Z0-9_]+-[A-Z]{3,5}-[0-9]{3,}\]" | head -n 1)
          if [ -z "$RAW_GUILD_OP_ID" ]; then
            echo "::error::Guild Op ID not found or invalid format. Must be like [PREFIX-TYPE-001]."
            exit 1
          fi
          echo "raw_guild_op_id=$RAW_GUILD_OP_ID" >> $GITHUB_ENV
          
          PROJECT_ID_PREFIX_RAW=$(echo "$RAW_GUILD_OP_ID" | sed 's/\[//g; s/\]//g')
          PROJECT_ID_PREFIX=$(echo "$PROJECT_ID_PREFIX_RAW" | awk -F'-' '{print $1}')
          if [ -z "$PROJECT_ID_PREFIX" ]; then
            echo "::error::Could not parse PROJECT_ID_Prefix from $RAW_GUILD_OP_ID"
            exit 1
          fi
          echo "project_id_prefix=$PROJECT_ID_PREFIX" >> $GITHUB_ENV

          if [ ! -f "$MAPPINGS_FILE" ]; then
            echo "::error::Project mappings file '$MAPPINGS_FILE' not found at repository root!"
            exit 1
          fi
          
          # --- NEW: Extract name and dir_path from mapping ---
          PROJECT_INFO=$(jq -r --arg prefix "$PROJECT_ID_PREFIX" '.[$prefix]' "$MAPPINGS_FILE")
          if [ -z "$PROJECT_INFO" ] || [ "$PROJECT_INFO" == "null" ]; then
            echo "::error::Project info for prefix '$PROJECT_ID_PREFIX' not found in '$MAPPINGS_FILE'. Please update the mapping file for this project."
            exit 1
          fi
          
          FULL_PROJECT_NAME=$(echo "$PROJECT_INFO" | jq -r '.name')
          PROJECT_DIR_PATH_SEGMENT=$(echo "$PROJECT_INFO" | jq -r '.dir_path')

          if [ -z "$FULL_PROJECT_NAME" ] || [ -z "$PROJECT_DIR_PATH_SEGMENT" ] || [ "$FULL_PROJECT_NAME" == "null" ] || [ "$PROJECT_DIR_PATH_SEGMENT" == "null" ]; then
            echo "::error::Mapping for '$PROJECT_ID_PREFIX' in '$MAPPINGS_FILE' is incomplete (missing 'name' or 'dir_path')."
            exit 1
          fi

          echo "full_project_name=$FULL_PROJECT_NAME" >> $GITHUB_ENV
          echo "project_dir_path_segment=$PROJECT_DIR_PATH_SEGMENT" >> $GITHUB_ENV

          # Construct the full path to the Guild Ops subdirectory using the segment from mappings
          GUILD_OPS_BASE_PATH="${BASE_PROJECTS_DIR}/${PROJECT_DIR_PATH_SEGMENT}/${GUILD_OPS_SUBDIR_NAME}"
          echo "guild_ops_base_path=$GUILD_OPS_BASE_PATH" >> $GITHUB_ENV

          # --- Construct the Project Slug Label (using dir_path_segment for slug) ---
          PROJECT_NAME_SLUG=$(echo "$PROJECT_DIR_PATH_SEGMENT" | tr '[:upper:]' '[:lower:]' | sed -e 's/[ _/:]/-/g' -e 's/--+/-/g') # Added / to replace for paths
          PROJECT_SLUG_LABEL_NAME="Project-Slug:$PROJECT_NAME_SLUG"
          echo "project_slug_label_name=$PROJECT_SLUG_LABEL_NAME" >> $GITHUB_ENV
          
          # Set branch name for this specific Guild Op (using prefix_raw for uniqueness)
          GUILD_OP_BRANCH="feature/guild-op-${{ github.event.issue.number }}-${PROJECT_ID_PREFIX_RAW}"
          echo "GUILD_OP_BRANCH=$GUILD_OP_BRANCH" >> $GITHUB_ENV

          # --- Check if the assumed parent project directory exists ---
          if [ ! -d "$GUILD_OPS_BASE_PATH" ]; then
            echo "::error::Expected parent project Guild Ops directory '$GUILD_OPS_BASE_PATH' does not exist! Please create it manually before creating issues for this project prefix '${PROJECT_ID_PREFIX}'."
            exit 1
          fi

# ... (rest of the workflow steps remain the same) ...
