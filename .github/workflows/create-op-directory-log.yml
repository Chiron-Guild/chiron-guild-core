name: Create Guild Op Directory, Log File, and Apply Project Label

on:
  issues:
    types:
      - opened

permissions:
  contents: write
  issues: write

jobs:
  create_op_scaffolding:
    if: >-
      github.event.sender.type != 'Bot' &&
      !contains(github.event.issue.labels.*.name, 'rapid-log')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Parse Guild Op Info and Determine Project Paths
        id: parse_info
        env:
          ISSUE_TITLE: "${{ github.event.issue.title }}"
          ISSUE_BODY: "${{ github.event.issue.body }}"
          MAPPINGS_FILE: "project_mappings.json"
          # REMOVED: This variable is redundant and was causing the path duplication error.
          # BASE_PROJECTS_DIR: "Projects"
          GUILD_OPS_SUBDIR_NAME: "Guild Ops"
        run: |
          echo "Parsing Guild Op Info from issue title and body..."
          
          RAW_GUILD_OP_ID=$(echo "$ISSUE_TITLE $ISSUE_BODY" | grep -oE "\[[A-Z0-9_]+-[A-Z]{3,5}-[0-9]{3,}\]" | head -n 1)
          if [ -z "$RAW_GUILD_OP_ID" ]; then
            echo "::error::Guild Op ID not found or invalid format. Must be like [PREFIX-TYPE-001] in title or body."
            exit 1
          fi
          echo "raw_guild_op_id=$RAW_GUILD_OP_ID" >> $GITHUB_ENV
          
          PROJECT_ID_PREFIX_RAW=$(echo "$RAW_GUILD_OP_ID" | sed 's/\[//g; s/\]//g')
          PROJECT_ID_PREFIX=$(echo "$PROJECT_ID_PREFIX_RAW" | awk -F'-' '{print $1}')
          if [ -z "$PROJECT_ID_PREFIX" ]; then
            echo "::error::Could not parse PROJECT_ID_Prefix from $RAW_GUILD_OP_ID."
            exit 1
          fi
          echo "project_id_prefix=$PROJECT_ID_PREFIX" >> $GITHUB_ENV

          if [ ! -f "$MAPPINGS_FILE" ]; then
            echo "::error::Project mappings file '$MAPPINGS_FILE' not found at repository root! This is required."
            exit 1
          fi
          
          PROJECT_INFO=$(jq -r --arg prefix "$PROJECT_ID_PREFIX" '.[$prefix]' "$MAPPINGS_FILE")
          if [ -z "$PROJECT_INFO" ] || [ "$PROJECT_INFO" == "null" ]; then
            echo "::error::Project info for prefix '$PROJECT_ID_PREFIX' not found in '$MAPPINGS_FILE'. Please update the mapping file for this project."
            exit 1
          fi
          
          FULL_PROJECT_NAME=$(echo "$PROJECT_INFO" | jq -r '.name')
          # This variable now correctly holds the full path from the repo root, e.g., "Projects/personal/creek_connections"
          PROJECT_DIR_PATH_SEGMENT=$(echo "$PROJECT_INFO" | jq -r '.dir_path')

          if [ -z "$FULL_PROJECT_NAME" ] || [ -z "$PROJECT_DIR_PATH_SEGMENT" ] || [ "$FULL_PROJECT_NAME" == "null" ] || [ "$PROJECT_DIR_PATH_SEGMENT" == "null" ]; then
            echo "::error::Mapping for '$PROJECT_ID_PREFIX' in '$MAPPINGS_FILE' is incomplete (missing 'name' or 'dir_path')."
            exit 1
          fi

          echo "full_project_name=$FULL_PROJECT_NAME" >> $GITHUB_ENV
          echo "project_dir_path_segment=$PROJECT_DIR_PATH_SEGMENT" >> $GITHUB_ENV

          # CORRECTED: Construct the path directly from the complete segment in project_mappings.json
          GUILD_OPS_BASE_PATH="${PROJECT_DIR_PATH_SEGMENT}/${GUILD_OPS_SUBDIR_NAME}"
          echo "guild_ops_base_path=$GUILD_OPS_BASE_PATH" >> $GITHUB_ENV

          PROJECT_NAME_SLUG=$(echo "$PROJECT_DIR_PATH_SEGMENT" | tr '[:upper:]' '[:lower:]' | sed -e 's/[ _/:]/-/g' -e 's/--+/-/g')
          PROJECT_SLUG_LABEL_NAME="Project-Slug:$PROJECT_NAME_SLUG"
          echo "project_slug_label_name=$PROJECT_SLUG_LABEL_NAME" >> $GITHUB_ENV
          
          GUILD_OP_BRANCH="feature/guild-op-${{ github.event.issue.number }}-${PROJECT_ID_PREFIX_RAW}"
          echo "GUILD_OP_BRANCH=$GUILD_OP_BRANCH" >> $GITHUB_ENV

          # This check is now more accurate.
          if [ ! -d "$GUILD_OPS_BASE_PATH" ]; then
            echo "::error::Expected parent project Guild Ops directory '$GUILD_OPS_BASE_PATH' does not exist! Please create it manually in your repository before creating issues for this project prefix '${PROJECT_ID_PREFIX}'."
            exit 1
          fi
          echo "Parent project Guild Ops directory check passed: '$GUILD_OPS_BASE_PATH' exists."

      # ... The rest of the steps for labels and branch creation are correct ...
      - name: Create Label if it does not exist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABEL_NAME: ${{ env.project_slug_label_name }}
          LABEL_COLOR: "0E8A16"
          LABEL_DESCRIPTION: "Identifies Ops belonging to the ${{ env.full_project_name }} project."
        run: |
          if ! gh api "repos/${{ github.repository }}/labels/$LABEL_NAME" --silent > /dev/null 2>&1; then
            gh label create "$LABEL_NAME" --color "$LABEL_COLOR" --description "$LABEL_DESCRIPTION"
          fi

      - name: Apply Project Slug Label to Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABEL_NAME: ${{ env.project_slug_label_name }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          gh issue edit $ISSUE_NUMBER --add-label "$LABEL_NAME"
          
      - name: Create and switch to Guild Op feature branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ env.GUILD_OP_BRANCH }} main
      
      - name: Create Specific Guild Op directory and .gitkeep
        run: |
          OP_DIR_NAME=$(echo "${{ env.raw_guild_op_id }}" | sed 's/\[//g; s/\]//g')
          TARGET_OP_DIR_PATH="${{ env.guild_ops_base_path }}/${OP_DIR_NAME}"
          mkdir -p "${TARGET_OP_DIR_PATH}"
          touch "${TARGET_OP_DIR_PATH}/.gitkeep"
          echo "target_op_dir_path=${TARGET_OP_DIR_PATH}" >> $GITHUB_ENV
          echo "op_dir_name_clean=${OP_DIR_NAME}" >> $GITHUB_ENV

      - name: Create Metadata File (Operation Log)
        run: |
          METADATA_FILE="${{ env.target_op_dir_path }}/${{ env.op_dir_name_clean }}_operation_log.md"
          GUILD_OP_ID_FOR_NOTES="${{ env.raw_guild_op_id }}"
          cat <<EOF > "${METADATA_FILE}"
          # Guild Op Metadata: ${GUILD_OP_ID_FOR_NOTES}

          ## Guild Op Details
          - **Title:** ${{ github.event.issue.title }}
          - **URL:** ${{ github.event.issue.html_url }}
          - **Author:** ${{ github.event.issue.user.login }}
          - **Created At:** ${{ github.event.issue.created_at }}
          - **Parent Project:** ${{ env.full_project_name }} 
          # SIMPLIFIED: No longer needs to prepend a base directory.
          - **Project Path:** \`${{ env.project_dir_path_segment }}\`

          ## Description
          ${{ github.event.issue.body }}

          ## Notes
          - This is a generated log file for tracking Guild Op metadata.
          - Update this file with progress logs, decisions, and schematics as needed.
          - Context Compilations for this Op are stored in: \`${{ env.target_op_dir_path }}\`
          EOF
          
      - name: Commit and Push Op Scaffolding to Feature Branch
        run: |
          git add "${{ env.target_op_dir_path }}"
          git commit -m "feat(guild-op): Scaffold directory and metadata for Op ${{ env.raw_guild_op_id }}"
          git push -u origin ${{ env.GUILD_OP_BRANCH }}
