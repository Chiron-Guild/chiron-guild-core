name: Create Guild Op Directory and Log File on Feature Branch

on:
  issues:
    types:
      - opened

permissions:
  contents: write # IMPORTANT: Grant write permissions for the GITHUB_TOKEN

jobs:
  create_directory_and_metadata:
    runs-on: ubuntu-latest
    steps:
      - name: Parse Guild Op ID from issue
        id: parse_guild_op
        run: |
          echo "Parsing Guild Op ID from issue title or description..."
          # Adjusted regex to be more specific to "[XXX-YYY-ZZZ]" format if needed,
          # or keep as is if it captures all desired IDs
          GUILD_OP_ID=$(echo "${{ github.event.issue.title }} ${{ github.event.issue.body }}" | grep -oE "\\[[A-Z]+-[A-Z]+-[0-9]{3}\\]" | head -n 1)

          if [ -z "$GUILD_OP_ID" ]; then
            echo "::error::Guild Op ID not found in issue title or description! Please include an ID like [AAA-BBB-123]."
            exit 1
          fi
          echo "Found Guild Op ID: ${GUILD_OP_ID}"
          echo "guild_op_id=${GUILD_OP_ID}" >> $GITHUB_ENV
          echo "GUILD_OP_BRANCH=feature/guild-op-${{ github.event.issue.number }}" >> $GITHUB_ENV # Set feature branch name

      - name: Checkout repository - target main first
        uses: actions/checkout@v4
        with:
          ref: main # Checkout main to base the new branch from

      - name: Create and switch to Guild Op feature branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if the branch already exists
          if git rev-parse --verify ${{ env.GUILD_OP_BRANCH }} >/dev/null 2>&1; then
            echo "Branch ${{ env.GUILD_OP_BRANCH }} already exists. Checking it out."
            git checkout ${{ env.GUILD_OP_BRANCH }}
          else
            echo "Creating new branch: ${{ env.GUILD_OP_BRANCH }}"
            git checkout -b ${{ env.GUILD_OP_BRANCH }}
          fi
          
      - name: Create Guild Op directory
        run: |
          echo "Creating directory for Guild Op: ${{ env.guild_op_id }}"
          mkdir -p "archives/${{ env.guild_op_id }}"
          echo "Directory created: archives/${{ env.guild_op_id }}"

      - name: Create Metadata File
        run: |
          METADATA_FILE="archives/${{ env.guild_op_id }}/${{ env.guild_op_id }}_operation_log.md"
          echo "Creating metadata file: ${METADATA_FILE}"
          cat <<EOF > "${METADATA_FILE}"
          # Guild Op Metadata: ${{ env.guild_op_id }}

          ## Guild Op Details
          - **Title:** ${{ github.event.issue.title }}
          - **URL:** ${{ github.event.issue.html_url }}
          - **Author:** ${{ github.event.issue.user.login }}
          - **Created At:** ${{ github.event.issue.created_at }}

          ## Description
          ${{ github.event.issue.body }}

          ## Notes
          - This is a generated log file for tracking Guild Op metadata.
          - Update this file with progress logs, decisions, and schematics as needed.
          EOF
          echo "Metadata file created."
          
      - name: Commit and Push Changes to Feature Branch
        run: |
          # Check if there are actual changes before attempting to commit
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes detected. Directory or metadata file might already exist or issue ID was duplicated."
            exit 0 # Exit successfully if no changes
          fi

          git add "archives/${{ env.guild_op_id }}"
          git commit -m "feat(guild-op): Scaffold directory and metadata for Guild Op: ${{ env.guild_op_id }}"
          
          echo "Attempting to push changes to feature branch ${{ env.GUILD_OP_BRANCH }} using GITHUB_TOKEN..."
          git push origin ${{ env.GUILD_OP_BRANCH }}
          echo "Changes pushed successfully to feature branch."
