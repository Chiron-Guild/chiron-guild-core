name: Update Operative Registry on Guild Op PR Merge

on:
  pull_request:
    types: [closed] # Trigger when a Pull Request is closed (either merged or not)

permissions:
  contents: write      # To commit and push changes to the operative registry AND delete branch
  pull-requests: read  # To read the PR body and access linked issues
  issues: read         # To fetch the original Guild Op issue details

jobs:
  update-registry:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true # Only run if the PR was actually merged

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: main # We need to check out the main branch to update the registry file

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Debug Initial registry.json content
        run: |
         echo "--- Content of registry/operative_registry.json BEFORE update_registry.py runs ---"
         cat registry/operative_registry.json || echo "File not found or empty."
         echo "--- End of initial content ---"

      - name: Get linked Guild Op issue details
        id: get_issue_details
        uses: actions/github-script@v6
        with:
          script: |
            const pull_request = context.payload.pull_request;
            
            if (!pull_request) {
              console.log('Pull request payload is not available in context.payload.');
              core.setOutput('skip_update', 'true');
              return;
            }

            const prBody = pull_request.body;
            if (typeof prBody !== 'string') {
              console.log('PR body is not available or not a string. Skipping registry update.');
              core.setOutput('skip_update', 'true');
              return;
            }
            
            const regex = /Closes\s+#(\d+)/i; 
            const match = prBody.match(regex);
            
            if (!match) {
              console.log('No "Closes #<issue_number>" found in PR body. Skipping registry update for this PR.');
              core.setOutput('skip_update', 'true');
              return;
            }
            
            const issueNumber = parseInt(match[1], 10);
            console.log(`Found linked issue number: #${issueNumber}`);
            
            try {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              
              core.setOutput('issue_number', issue.number.toString());
              core.setOutput('issue_title', issue.title);
              core.setOutput('issue_body', issue.body);
              core.setOutput('assignees', JSON.stringify(issue.assignees));
              core.setOutput('labels', JSON.stringify(issue.labels));
              core.setOutput('issue_url', issue.html_url);
              core.setOutput('closed_at', issue.closed_at || '');
              core.setOutput('skip_update', 'false');

            } catch (error) {
              console.error(`Failed to fetch issue #${issueNumber}: ${error.message}. Skipping registry update.`);
              core.setOutput('skip_update', 'true');
            }
          result-encoding: json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update operative registry
        if: steps.get_issue_details.outputs.skip_update == 'false'
        run: |
          cat <<'EOF_ISSUE_BODY' > issue_body.md
          ${{ steps.get_issue_details.outputs.issue_body }}
          EOF_ISSUE_BODY
          
          python .github/scripts/update_registry.py \
            --issue-number "${{ steps.get_issue_details.outputs.issue_number }}" \
            --issue-title "${{ steps.get_issue_details.outputs.issue_title }}" \
            --issue-body "$(cat issue_body.md)" \
            --assignees '${{ steps.get_issue_details.outputs.assignees }}' \
            --labels '${{ steps.get_issue_details.outputs.labels }}' \
            --issue-url "${{ steps.get_issue_details.outputs.issue_url }}" \
            --closed-at "${{ steps.get_issue_details.outputs.closed_at }}"

      - name: Debug Registry.json content AFTER python script
        if: steps.get_issue_details.outputs.skip_update == 'false'
        run: |
          echo "--- Content of registry/operative_registry.json AFTER update_registry.py runs ---"
          cat registry/operative_registry.json
          echo "--- End of content after script ---"

      - name: Debug Git status BEFORE staging
        if: steps.get_issue_details.outputs.skip_update == 'false'
        run: |
          echo "--- Git status BEFORE 'git add' ---"
          git status
          echo "--- End of git status before add ---"

      - name: Stage registry changes
        if: steps.get_issue_details.outputs.skip_update == 'false'
        run: git add registry/operative_registry.json

      - name: Debug Git status AFTER staging
        if: steps.get_issue_details.outputs.skip_update == 'false'
        run: |
          echo "--- Git status AFTER 'git add' ---"
          git status
          echo "--- End of git status after add ---"

      - name: Commit and push registry changes
        if: steps.get_issue_details.outputs.skip_update == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if ! git diff --quiet --cached; then
            git commit -m "Auto-update registry: Guild Seal for #${{ steps.get_issue_details.outputs.issue_number }} (via PR #${{ github.event.pull_request.number }} merge)"
            git push
            echo "Registry committed and pushed."
          else
            echo "No changes detected in registry/operative_registry.json. Skipping commit."
          fi

      - name: Delete merged feature branch # <--- NEW STEP
        if: github.event.pull_request.merged == true # Double-check condition
        run: |
          BRANCH_TO_DELETE="${{ github.event.pull_request.head.ref }}"
          echo "Attempting to delete merged branch: ${BRANCH_TO_DELETE}"
          git push origin --delete "${BRANCH_TO_DELETE}" || { echo "Warning: Could not delete branch ${BRANCH_TO_DELETE}. It might have already been deleted or permissions are insufficient."; }
        env:
          GITHUB_TOKEN: ${{ github.token }} # Ensure token with write permissions is available
